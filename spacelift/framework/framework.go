package framework

import (
	"context"
	"fmt"

	"github.com/hashicorp/go-retryablehttp"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	fwprovider "github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/pkg/errors"
	"github.com/shurcooL/graphql"

	"github.com/spacelift-io/terraform-provider-spacelift/spacelift"
	"github.com/spacelift-io/terraform-provider-spacelift/spacelift/internal"
)

// ensure the implementation satisfies the expected interfaces
var (
	_ fwprovider.Provider = &spaceliftProvider{}
)

func New(version, commit string) func() fwprovider.Provider {
	return func() fwprovider.Provider {
		return &spaceliftProvider{
			version: version,
			commit:  commit,
		}
	}
}

type spaceliftProvider struct {
	version string
	commit  string

	client *internal.Client
}

func (s *spaceliftProvider) Metadata(_ context.Context, _ fwprovider.MetadataRequest, resp *fwprovider.MetadataResponse) {
	resp.TypeName = "spacelift"
	resp.Version = s.version
}

func (s *spaceliftProvider) Schema(_ context.Context, _ fwprovider.SchemaRequest, resp *fwprovider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_key_endpoint": schema.StringAttribute{
				Description: "Endpoint to use when authenticating with an API key outside of Spacelift",
				Optional:    true,
				Sensitive:   false,
			},
			"api_key_id": schema.StringAttribute{
				Description: "ID of the API key to use when executing outside of Spacelift",
				Optional:    true,
				Sensitive:   false,
			},
			"api_key_secret": schema.StringAttribute{
				Description: "API key secret to use when executing outside of Spacelift",
				Optional:    true,
				Sensitive:   true,
			},
			"api_token": schema.StringAttribute{
				Description: "Spacelift token generated by a run, only useful from within Spacelift",
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (s *spaceliftProvider) ConfigureProvider(ctx context.Context, req fwprovider.ConfigureRequest) (*spacelift.Config, diag.Diagnostics) {
	var diags diag.Diagnostics
	var config spacelift.Config

	req.Config.GetAttribute(ctx, path.Root("api_key_endpoint"), &config.APIKeyEndpoint)
	req.Config.GetAttribute(ctx, path.Root("api_key_id"), &config.APIKeyID)
	req.Config.GetAttribute(ctx, path.Root("api_key_secret"), &config.APIKeySecret)
	req.Config.GetAttribute(ctx, path.Root("api_token"), &config.APIToken)

	config.OverwriteWithEnvironmentWhenNotSet()

	if err := config.Validate(); err != nil {
		diags.AddError("Invalid provider configuration", err.Error())

		return nil, diags
	}

	return &config, nil
}

func (s *spaceliftProvider) Configure(ctx context.Context, req fwprovider.ConfigureRequest, resp *fwprovider.ConfigureResponse) {
	config, diags := s.ConfigureProvider(ctx, req)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	var client *internal.Client
	var err error
	if config.UseAPIKey {
		tflog.Debug(ctx, "Creating Spacelift client based on API key")
		client, err = buildClientFromAPIKeyDataForFrameworkProvider(
			config.APIKeyEndpoint,
			config.APIKeyID,
			config.APIKeySecret,
		)
		return
	} else {
		tflog.Debug(ctx, "Creating Spacelift client based on API token")
		client, err = spacelift.BuildClientFromToken(config.APIToken)
	}

	if err != nil {
		resp.Diagnostics.AddError("could not build API client: %v", err.Error())
	}

	s.setClient(client, resp)
}

func (s *spaceliftProvider) setClient(client *internal.Client, resp *fwprovider.ConfigureResponse) {
	client.Commit = s.commit
	client.Version = s.version

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (s *spaceliftProvider) Resources(_ context.Context) []func() resource.Resource {
	return []func() resource.Resource{NewAWSRoleResource}
}

func (s *spaceliftProvider) DataSources(_ context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{}
}

func buildClientFromAPIKeyDataForFrameworkProvider(endpoint, id, secret string) (*internal.Client, error) {
	// Since validation runs first, we can safely assume that the data is there.
	endpoint = fmt.Sprintf("%s/graphql", endpoint)

	retryableClient := retryablehttp.NewClient()
	retryableClient.Logger = nil

	rawClient := graphql.NewClient(endpoint, retryableClient.StandardClient())

	var mutation struct {
		User *struct {
			Token string `graphql:"jwt"`
		} `graphql:"apiKeyUser(id: $id, secret: $secret)"`
	}

	err := rawClient.Mutate(context.Background(), &mutation, map[string]interface{}{
		"id":     graphql.ID(id),
		"secret": graphql.String(secret),
	})

	if err != nil {
		return nil, errors.Wrap(err, "could not get API user data")
	}

	if mutation.User == nil {
		return nil, errors.New("no such API user, your key ID may be incorrect")
	}

	return spacelift.BuildClientFromToken(mutation.User.Token)
}
